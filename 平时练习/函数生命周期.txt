1、js代码开始执行时，创建全局执行环境栈

2、往执行环境栈中入栈一个全局环境――指向window

3、当遇见function关键字的时候，创建函数对象，
	a、函数对象的scope属性执行父级作用域（也就是AO）
	b、创建变量对象（VO），保存当前函数内声明的变量和函数

4、当函数被调用时，往全局执行环境栈入栈当前函数的执行环境，创建当前函数得到活动对象（AO）
  当前执行环境的作用域链引用着AO。AO继承函数体的scope属性指定的父级AO。（感觉作用域链本质上就是继承链）

5、函数调用完成，当前函数执行环境出栈，作用域链对AO的引用消失，AO如果没有其他的引用，
   被垃圾回收机制回收，AO中保存的变量与函数一起被销毁。

6、当前函数的AO被销毁，但函数体却不会被销毁，因为被全局对象引用着。除非是匿名函数，
   执行完毕无引用自动销毁，或者函数声明在另一个函数体内，随着父级函数的AO一同被销毁。

疑问：函数对象的AO被销毁，但是VO应该是不会被销毁的，AO的创建应该是来自VO的深拷贝（自我感觉是这样），
      但是没有找到确切的答案。